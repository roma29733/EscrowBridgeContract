;; imports
#include "imports/stdlib.fc";
#include "utils/EscrowUtils.fc";
#include "utils/op-codes.func";
#include "utils/error-codes.func";

;; State contract this int describes state,
;; * 0 describes the state, primary, the implementer has not confirmed participation
;; * 1 implementer has confirmed participation, but the project has not started yet
;; * 3 The project has started
;; * 4 the project has been submitted for verification
;; * 5 the project has been successfully accepted, the project is over
;; * 6 there was a revision
;; * 7 revision in the work
;; * 8 a controversial point, requires the intervention of the administrator
;; * 9 the administrator has made a decision
;; * 2 the deal failed

(cell, slice, slice, slice, cell, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_ref(),
        ds~load_msg_addr(),
        ds~load_msg_addr(),
        ds~load_msg_addr(),
        ds~load_ref(),
        ds~load_uint(8));
}

() save_data(cell contract_details, slice employer_address, slice implementer_address, slice escrow_master, cell jetton_wallet_code, int state_contract) impure inline {
    set_data(
        pack_child_escrow_data(
            contract_details,
            employer_address,
            implementer_address,
            escrow_master,
            jetton_wallet_code, state_contract)
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    ;; get flags

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_op();

    if(op == op::change_cod) {
        (cell contract_details, slice employer_address, slice implementer_address, slice escrow_master, cell jetton_wallet_code, int state_contract) = load_data();
        cell newCode = in_msg_body~load_ref();
        save_data( contract_details, employer_address, implementer_address, escrow_master, newCode, state_contract);
        return ();
    }


    if(op:toNextStep) {
        (cell contract_details, slice employer_address, slice implementer_address, slice escrow_master, cell jetton_wallet_code, int state_contract) = load_data();

        if(state_contract == 0) {
            throw_unless(error::unauthorized_change_admin_request, equal_slice_bits(sender_address, implementer_address));
            save_data(contract_details, employer_address, implementer_address, escrow_master, jetton_wallet_code, 1);
            return ();
        }

        if(state_contract == 1) {
            throw_unless(error::unauthorized_change_admin_request, equal_slice_bits(sender_address, implementer_address));
            save_data(contract_details, employer_address, implementer_address, escrow_master, jetton_wallet_code, 3);
            return ();
        }

        if(state_contract == 3) {
            throw_unless(error::unauthorized_change_admin_request, equal_slice_bits(sender_address, implementer_address));
            save_data(contract_details, employer_address, implementer_address, escrow_master, jetton_wallet_code, 4);
            return ();
        }

        if(state_contract == 4) {
            throw_unless(error::unauthorized_change_admin_request, equal_slice_bits(sender_address, employer_address));
            save_data(contract_details, employer_address, implementer_address, escrow_master, jetton_wallet_code, 5);
            return ();
        }

        return ();
    }

    if(op:sendToRevision){
        (cell contract_details, slice employer_address, slice implementer_address, slice escrow_master, cell jetton_wallet_code, int state_contract) = load_data();

        if(state_contract == 4) {
            throw_unless(error::unauthorized_change_admin_request, equal_slice_bits(sender_address, employer_address));
            save_data(contract_details, employer_address, implementer_address, escrow_master, jetton_wallet_code, 6);
        }

        return ();
    }


}
;; methods for get data for it contract
(cell, slice, slice, slice, cell, int) get_contract_data() method_id {
    return load_data();
}