;; imports
#include "./imports/stdlib.fc";
#include "./utils/EscrowUtils.fc";
#include "./utils/messages.func";
#include "./utils/op-codes.func";
#include "./utils/error-codes.func";

(slice, cell, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; admin_address
        ds~load_ref(), ;; pass_manager_code
        ds~load_int(8)
    );
}

() save_data(slice admin_address, cell escrow_code, int version_code) impure inline {
    set_data(
        begin_cell()
            .store_slice(admin_address)
            .store_ref(escrow_code)
            .store_int(version_code, 8)
            .end_cell()
    );
}

() mintChildEscrow(slice to_address,cell contract_details, slice implementer_address, cell escrow_code,int amount,  cell master_msg, int version_code) impure {
    cell state_init = calculate_child_escrow_state_init(
        version_code,
        contract_details,
        to_address,
        implementer_address,
        my_address(),
        escrow_code);
    slice to_pass_child_address = calc_address(state_init);

    var newMsg = begin_cell()
        .store_msg_flag(msg_flag::non_bounceable)
        .store_slice(to_pass_child_address)
        .store_coins(amount)
        .store_msgbody_prefix_stateinit(state_init, master_msg);
    send_raw_message(newMsg.end_cell(), PAY_FEES_SEPARATELY);
}


() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_op();
    int query_id = in_msg_body~load_query_id();

    (slice admin_address, cell escrow_code, int version_code) = load_data();

    if (op == op::change_cod) {
        throw_unless(error::unauthorized_change_admin_request, equal_slices_bits(sender_address, admin_address));
        cell newCode = in_msg_body~load_ref();
        if(newCode.begin_parse().slice_empty?()) {
            return ();
        }
        save_data(admin_address, newCode, version_code);
        return ();
    }

    if(op == op::change_cod_master) {
        throw_unless(error::unauthorized_change_admin_request, equal_slices_bits(sender_address, admin_address));
        cell newCode = in_msg_body~load_ref();
        if(newCode.begin_parse().slice_empty?()) {
            return ();
        }
        set_code(newCode);
        return ();
    }


    if (op == op::mint) {
        slice implementer_address = in_msg_body~load_msg_addr();
        cell contract_details = in_msg_body~load_ref();
        ;; slice to_address = in_msg_body~load_msg_addr();
        ;; throw_unless(error::unauthorized_mint_request, equal_slice_bits(sender_address, to_address));

        cell mint_request = begin_cell()
            .store_op(op::internal_transfer)
            .store_query_id(query_id)
            ;; .store_ref(contract_details)
            .store_uint(0, 2) ;; from_address, addr_none$00
            .store_slice(my_address()) ;; response_address, 3 + 8 + 256 = 267 bit
            .store_uint(0, 1) ;; no forward_payload, 1 bit
            .end_cell();

        mintChildEscrow(sender_address, contract_details, implementer_address, escrow_code, msg_value,mint_request, version_code);
        save_data(admin_address, escrow_code, version_code);
        return ();
    }

    if(op == op::sendMessages) {
        throw_unless(error::unauthorized_change_admin_request, equal_slices_bits(sender_address, admin_address));

        slice to = in_msg_body~load_msg_addr();
        cell messages = in_msg_body~load_ref();
        int sending_coins = msg_value;
        var newMsg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(to)
            .store_coins(sending_coins)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_slice(messages.begin_parse())
            .end_cell();

        send_raw_message(newMsg, PAY_FEES_SEPARATELY);

        return ();
    }

}

slice get_address_child(slice owner_address, slice implementer_address, cell contract_details) method_id {
    (slice admin_address, cell pass_manager_code, int version_code) = load_data();
    return calc_child_escrow_item(version_code, contract_details,owner_address, implementer_address,my_address(), pass_manager_code);
}

(slice, cell, int) get_storage_data() method_id {
    (slice admin_address, cell pass_manager_code, int version_code ) = load_data();
    return (admin_address, pass_manager_code, version_code);
}

